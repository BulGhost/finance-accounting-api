// <auto-generated />
using System;
using FinanceAccounting.DataAccess.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinanceAccounting.DataAccess.Migrations
{
    [DbContext(typeof(BookkeepingContext))]
    partial class BookkeepingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExpenseCategoryUser", b =>
                {
                    b.Property<Guid>("ExpenseCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpenseCategoriesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ExpenseCategoryUser");
                });

            modelBuilder.Entity("FinanceAccounting.Models.ExpenseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryName" }, "IX_ExpenseCategory_CategoryName")
                        .IsUnique();

                    b.ToTable("ExpenseCategories");
                });

            modelBuilder.Entity("FinanceAccounting.Models.ExpenseRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Details")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("ExpenseCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex(new[] { "UserId" }, "IX_ExpenseRecords_UserId");

                    b.ToTable("ExpenseRecords");
                });

            modelBuilder.Entity("FinanceAccounting.Models.IncomeCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryName" }, "IX_IncomeCategory_CategoryName")
                        .IsUnique();

                    b.ToTable("IncomeCategories");
                });

            modelBuilder.Entity("FinanceAccounting.Models.IncomeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Details")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("IncomeCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IncomeCategoryId");

                    b.HasIndex(new[] { "UserId" }, "IX_IncomeRecords_UserId");

                    b.ToTable("IncomeRecords");
                });

            modelBuilder.Entity("FinanceAccounting.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IncomeCategoryUser", b =>
                {
                    b.Property<Guid>("IncomeCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IncomeCategoriesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("IncomeCategoryUser");
                });

            modelBuilder.Entity("ExpenseCategoryUser", b =>
                {
                    b.HasOne("FinanceAccounting.Models.ExpenseCategory", null)
                        .WithMany()
                        .HasForeignKey("ExpenseCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceAccounting.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceAccounting.Models.ExpenseRecord", b =>
                {
                    b.HasOne("FinanceAccounting.Models.ExpenseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceAccounting.Models.User", "User")
                        .WithMany("ExpenseRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceAccounting.Models.IncomeRecord", b =>
                {
                    b.HasOne("FinanceAccounting.Models.IncomeCategory", "CategoryNavigation")
                        .WithMany()
                        .HasForeignKey("IncomeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceAccounting.Models.User", "User")
                        .WithMany("IncomeRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IncomeCategoryUser", b =>
                {
                    b.HasOne("FinanceAccounting.Models.IncomeCategory", null)
                        .WithMany()
                        .HasForeignKey("IncomeCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceAccounting.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceAccounting.Models.User", b =>
                {
                    b.Navigation("ExpenseRecords");

                    b.Navigation("IncomeRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
